# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import random
import tarfile

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization

from pyring.sc25519 import Scalar
from pyring.ge import Point
from pyring.one_time import PrivateKey, ring_sign, within_ring_sign
from pyring.serialize import export_ring_pem, export_within_ring_pem


def _cryptography_to_scalar(private_key):
    return Scalar(
        private_key.private_bytes(
            serialization.Encoding.Raw,
            serialization.PrivateFormat.Raw,
            serialization.NoEncryption(),
        )
    )


def _cryptography_to_point(public_key):
    return Point(
        public_key.public_bytes(
            serialization.Encoding.Raw, serialization.PublicFormat.Raw
        )
    )


def sign(message, private_key_file, public_keys_files, password):
    """Generate a one-time ring signature.

    Signs a given message using a given private key and a set of of
    public keys. Note that public keys can also be given as .tar or .tar.gz
    files.
    """
    # Read the message
    message = message.read()

    # Load the private key
    if password is not None:
        password = password.encode()
    private_key = serialization.load_pem_private_key(
        private_key_file.read(), password, default_backend()
    )

    # Load the public keys
    public_keys = []
    for public_key_file in public_keys_files:
        if tarfile.is_tarfile(public_key_file.name):
            with tarfile.open(fileobj=public_key_file) as f:
                for tarinfo in f:
                    public_key = serialization.load_pem_public_key(
                        f.extractfile(tarinfo).read(), default_backend()
                    )
                    public_keys.append(public_key)
        else:
            public_key = serialization.load_pem_public_key(
                public_key_file.read(), default_backend()
            )
            public_keys.append(public_key)

    # Derive the public key to check if it is in the list
    signer_private_key = _cryptography_to_scalar(private_key)
    signer_public_key = PrivateKey(signer_private_key).public_key().point
    public_keys = [_cryptography_to_point(pk) for pk in public_keys]
    if signer_public_key not in public_keys:
        print("noooo")

    # Shuffle the public keys
    random.SystemRandom().shuffle(public_keys)
    signer_index = public_keys.index(signer_public_key)

    return public_keys, signer_private_key, signer_index


def do_ring_sign(message, private_key_file, public_keys_files, password):
    public_keys, signer_private_key, signer_index = sign(message, private_key_file, public_keys_files, password)

    # Convert the keys into scalars/points and sign the message
    signature = ring_sign(message, public_keys, signer_private_key, signer_index)

    # Serialize the ring signature
    print(export_ring_pem(signature))


def do_within_ring_sign(message, private_key_file, public_keys_files, password):
    public_keys, signer_private_key, signer_index = sign(message, private_key_file, public_keys_files, password)

    # Convert the keys into scalars/points and sign the message
    signature = within_ring_sign(message, public_keys, signer_private_key, signer_index)

    # Serialize the ring signature
    print(export_within_ring_pem(signature))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('message')
    parser.add_argument('private_key')
    parser.add_argument('public_keys', nargs='+')
    parser.add_argument('--within_ring', action='store_true')
    args = parser.parse_args()

    message = open(args.message, 'rb')
    private_key = open(args.private_key, 'rb')
    public_keys = [open(public_key, 'rb') for public_key in args.public_keys]

    if args.within_ring:
	    do_within_ring_sign(message, private_key, public_keys, None)
    else:
	    do_ring_sign(message, private_key, public_keys, None)

    message.close()
    private_key.close()
    for public_key in public_keys:
	    public_key.close()
