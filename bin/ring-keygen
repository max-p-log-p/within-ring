# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import pathlib

from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ed25519

from pyring.one_time import PrivateKey


def keygen():
    """Generate a public-private key pair.

    The resulting keys can be used to generate one-time ring signatures.
    """

    parser = argparse.ArgumentParser()
    parser.add_argument('secret_file')
    parser.add_argument('public_file')
    args = parser.parse_args()

    secret_key = PrivateKey.generate()
    public_key = secret_key.public_key()

    pk = ed25519.Ed25519PublicKey.from_public_bytes(bytes(public_key.point.data))
    sk = ed25519.Ed25519PrivateKey.from_private_bytes(bytes(secret_key.scalar.data))

    pk_pem = pk.public_bytes(
        serialization.Encoding.PEM, serialization.PublicFormat.SubjectPublicKeyInfo
    )

    encryption_algorithm = serialization.NoEncryption()
    sk_pem = sk.private_bytes(
        serialization.Encoding.PEM,
        serialization.PrivateFormat.PKCS8,
        encryption_algorithm,
    )

    with open(args.secret_file, "w") as f:
        f.write(sk_pem.decode())
    with open(args.public_file, "w") as f:
        f.write(pk_pem.decode())


if __name__ == "__main__":
    keygen()
